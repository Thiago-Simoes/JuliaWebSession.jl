var documenterSearchIndex = {"docs":
[{"location":"#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"","category":"page"},{"location":"#Sessions","page":"Documentation","title":"Sessions","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"add_session(session::Session)","category":"page"},{"location":"#WebSession.add_session-Tuple{Session}","page":"Documentation","title":"WebSession.add_session","text":"add_session(session::Session)::Nothing\n\nAdd a session to the session storage.\n\nArguments\n\nsession: the Session to be added.\n\nReturns\n\nThe function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"add_session_data(\r\n    key::String,\r\n    value::Union{String, Real}, \r\n    req::HTTP.Request = Genie.Requests.request(),\r\n    res::HTTP.Response = Genie.Responses.getresponse()\r\n)","category":"page"},{"location":"#WebSession.add_session_data","page":"Documentation","title":"WebSession.add_session_data","text":"add_session_data(\n    key::String,\n    value::Union{String, Real}, \n    req::HTTP.Request = Genie.Requests.request(),\n    res::HTTP.Response = Genie.Responses.getresponse()\n)::Nothing\n\nAdd data to a session in the session storage.\n\nArguments\n\nkey: the key of the data to be added.\nvalue: the value of the data to be added.\nreq: the HTTP.Request object.\nres: the HTTP.Response object.\n\nReturn\n\nThe function returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Documentation","title":"Documentation","text":"get_cookie(\r\n        payload::Union{HTTP.Request, HTTP.Response},\r\n        name::String\r\n)","category":"page"},{"location":"#WebSession.get_cookie-Tuple{Union{HTTP.Messages.Request, HTTP.Messages.Response}, String}","page":"Documentation","title":"WebSession.get_cookie","text":"get_cookie(\n    payload::Union{HTTP.Request, HTTP.Response},\n    name::String\n)::Union{HTTP.Cookie, Nothing}\n\nGet a cookie from a HTTP.Request or HTTP.Response object.\n\nArguments\n\npayload: the HTTP.Request or HTTP.Response object.\nname: the name of the cookie.\n\nReturn\n\nThe function returns the cookie if it exists, otherwise it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"get_session(\r\n        req::HTTP.Request,\r\n        res::HTTP.Response\r\n    )","category":"page"},{"location":"#WebSession.get_session-Tuple{HTTP.Messages.Request, HTTP.Messages.Response}","page":"Documentation","title":"WebSession.get_session","text":"get_session(\n    req::HTTP.Request,\n    res::HTTP.Response\n)::Union{Session, Nothing}\n\nGet a session from the session storage for a HTTP.Request and HTTP.Response object. If the session does not exist, it is created.\n\nArguments\n\nreq: the HTTP.Request object.\nres: the HTTP.Response object.\n\nReturn\n\nThe function returns the session if it exists, otherwise it returns the newly created.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"get_session_data(\r\n        key::String,\r\n        req::HTTP.Request = Genie.Requests.request(),\r\n        res::HTTP.Response = Genie.Responses.getresponse()\r\n)","category":"page"},{"location":"#WebSession.get_session_data","page":"Documentation","title":"WebSession.get_session_data","text":"get_session_data(\n    key::String,\n    req::HTTP.Request = Genie.Requests.request(),\n    res::HTTP.Response = Genie.Responses.getresponse()\n)::Union{Any, Nothing}\n\nGets the data for a session in the session store that matches the key.\n\nArguments\n\nkey: the key of the data to be retrieved.\nreq: the HTTP.Request object. By default is Genie.Requests.request().\nres: the HTTP.Response object. By default is Genie.Responses.getresponse().\n\nReturn\n\nThe function returns the data if it exists, otherwise it returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Documentation","title":"Documentation","text":"get_session_id(req::HTTP.Request, res::HTTP.Response)","category":"page"},{"location":"#WebSession.get_session_id-Tuple{HTTP.Messages.Request, HTTP.Messages.Response}","page":"Documentation","title":"WebSession.get_session_id","text":"get_session_id(req::HTTP.Request, res::HTTP.Response)::Union{String, Nothing}\n\nGet the session id from a HTTP.Request or HTTP.Response object. First will try to get the session id from the HTTP.Request object. If it does not exist, it will try to get it from the HTTP.Response object.\n\nArguments\n\nreq: the HTTP.Request object.\nres: the HTTP.Response object.\n\nReturn\n\nThe function returns the session id if it exists, otherwise it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"get_session_storage(session_id::String)","category":"page"},{"location":"#WebSession.get_session_storage-Tuple{String}","page":"Documentation","title":"WebSession.get_session_storage","text":"get_session_storage(session_id::String)::Union{Session, Nothing}\n\nGet a session from the session storage for a session id.\n\nArguments\n\nsession_id: the session id.\n\nReturn\n\nThe function returns the session if it exists, otherwise it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"id()","category":"page"},{"location":"#WebSession.id-Tuple{}","page":"Documentation","title":"WebSession.id","text":"id()::String\n\nGenerates a random Session id.\n\nReturn\n\nThe function returns a random string Session id.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"remove_session(session_id::String)","category":"page"},{"location":"#WebSession.remove_session-Tuple{String}","page":"Documentation","title":"WebSession.remove_session","text":"remove_session(session_id::String)::Nothing\n\nRemove a session from the session storage.\n\nArguments\n\nsession_id: the session id.\n\nReturn\n\nThe function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"session_exists(payload::Union{HTTP.Request, HTTP.Response})","category":"page"},{"location":"#WebSession.session_exists-Tuple{Union{HTTP.Messages.Request, HTTP.Messages.Response}}","page":"Documentation","title":"WebSession.session_exists","text":"session_exists(payload::Union{HTTP.Request, HTTP.Response})::Bool\n\nCheck if a session exists for a HTTP.Request or HTTP.Response object.\n\nArguments\n\npayload: the HTTP.Request or HTTP.Response object.\n\nReturn\n\nThe function returns true if the session exists, otherwise it returns false.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Documentation","title":"Documentation","text":"start_session(req::HTTP.Request, res::HTTP.Response)","category":"page"},{"location":"#WebSession.start_session-Tuple{HTTP.Messages.Request, HTTP.Messages.Response}","page":"Documentation","title":"WebSession.start_session","text":"start_session(req::HTTP.Request, res::HTTP.Response)::Session\n\nStarts a session to an HTTP.Request and HTTP.Response object.   Checks if the session already exists and if it does, returns it.   The cookie is set in the response. The session is added to the session store.  \n\nArguments\n\nreq: the HTTP.Request object.\nres: the HTTP.Response object.\n\nReturn\n\nThe function returns the new session or an existing session.\n\n\n\n\n\n","category":"method"},{"location":"#Session-Storage-Management","page":"Documentation","title":"Session Storage Management","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"SessionStorageManagement()","category":"page"},{"location":"#WebSession.SessionStorageManagement-Tuple{}","page":"Documentation","title":"WebSession.SessionStorageManagement","text":"SessionStorageManagement()::Nothing\n\nManages the session storage. It's is a infinite loop that runs every 10 second. It checks if the session has expired and if it has, it removes it from the session storage. Don't need to call this function, it is called automatically by init() function and  runs assyncronously.\n\nReturn\n\nThe function returns nothing.\n\n\n\n\n\n","category":"method"}]
}
